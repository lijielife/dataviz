message = scan("http://www2.research.att.com/~volinsky/DataMining/Columbia2011/HW/KennyMCMC/message1.txt",
what = character())
# Separate the message into individual characters
message = unlist(strsplit(do.call(paste, as.list(message)), NULL))
# We change the probabilities of transition so that there are
# no zero-values using a sort of Laplacian smoothing, and
# find something to multiply the values by so that we dont get 0
# probability (restrictions on Rs computational precision)
fixed.trans1 = log(trans + 1)
fixed.trans1 = 50*(fixed.trans1 + 1)/(rowSums(fixed.trans1) + 51)
# Set a seed to make this reproducible...
set.seed(8675309)
# Set a different, random seed, as to avoid some bias
# (your random number will still be the same as mine here)
set.seed(runif(1, 0, 999999))
DecodeMessage(fixed.trans1, dictionary, message,
iter = 100000, temp = 10000,
method = "Anneal", attack = 10) -> annel
fun <- function(){
x <- readline("Enter your cipher.")
}
fun()
x
x
fun <- function(){
x <- readline("Enter your cipher.")
return(x)
}
fun()
x
rm(list=ls())
fun <- function(){
x <- readline("Enter your cipher.")
return(x)
}
fun()
x
x <- readline("Enter your cipher.")
x
x <- readline("Enter your cipher. \n")
x <- "QYFWIGY"
x[1]
first_char <- substring(x, 1, 1)
first_char
first_char <- substring(x, 1)
first_char
alphabet <- c("A", "B", "C", "D", "E", "F",
"G", "H", "I", "J", "K", "L",
"M", "N", "O", "P", "Q", "R",
"S", "T", "U", "V", "W", "X",
"Y", "Z")
alphabet[1]
alphabet
length(alphabet)
length(unique(alphabet))
length(x)
?numchars
nchar(x)
i=3
substring(x, 1, i)
substring(x, i, 1)
i
x
?substring
substring(x, i, i)
pivot
pivot <- substring(x, i, i)
pivot
rm(list=ls())
library(igraph)
# Read data
my.data <- read.csv("/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/synopsys/cca/correlations_transonly.csv", sep = ",", header=FALSE, stringsAsFactors = FALSE)
my.data <- my.data[,1:3]
my.data <- my.data[order(my.data[3]),]
my.data2 <- my.data
# Create graph
my.graph <- graph.data.frame(d = my.data2, directed = FALSE)
write.graph(graph = my.graph, file = 'net.gml', format = 'gml')
chrc_graph = read.graph("net.gml", format = "gml")
# Node genes
node_genes <- V(chrc_graph)$name
# Download as input to GeneMANIA
# write.table(unlist(V(chrc_graph)$name), row.names = FALSE, sep="\t", file = "/Users/swetharevanur/Desktop/nodegenes.txt")
# Get edge weights
# w = 740^(my.data2[,3]) - 680
# Get edgelist
lab = get.edgelist(chrc_graph)
# Get degrees
glab = graph.edgelist(lab, directed = FALSE)
lab_degree = degree(glab)
# Get top 20 genes
# top_degree <- tail(sort(lab_degree), 20)
# top_coalt_genes <- names(top_degree)
# Get genes whose degree is >65 (high degree centrality)
top_degree <- sort(lab_degree)
top_degree <- top_degree[which(top_degree>65)]
top_coalt_genes <- names(top_degree)
top_coalt_genes <- sort(top_coalt_genes)
top_coalt_genes
topnet <- c("RNF2", "EED", "TP53", "PLK1", "BMI1", "EZH2","SUZ12", "AKT1",
"RAD21", "ESR1", "CDC20", "EGFR", "PIK3CA", "AURKA", "AR", "CHEK1",
"TOPBP1", "ACTL6A", "AURKB", "RBBP4", "SMARCA5", "TOP2B", "CTCF", "TOP1", "CBX3", "CENPE",
"TOP2A", "MKI67", "SMC3", "RING1", "CENPA")
intersect(topnet, top_coalt_genes)
setdiff(topnet, top_coalt_genes)
rm(list=ls())
library("CCP")
library("candisc")
data <- read.csv(file="/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/synopsys/preprocessed/cca_input.csv", header=TRUE, sep=",")
n <- nrow(data)
test <- data[,2:ncol(data)]
test <- apply(test, 1, function(x) as.numeric(x))
test <- scale(t(test))
View(test)
seq(1,nrow(test)-3,by=3)
i=1
seq(i+3,nrow(test),by=3)
j=4
j
i
x <- t(test[i:(i+2),])
y <- t(test[j:(j+2),])
ca <- cancor(x, y, set.names=c(strsplit(as.character(data[i,1]), "\\_")[[1]][1], strsplit(as.character(data[j,1]), "\\_")[[1]][1]))
plot(ca, xlab = strsplit(as.character(data[i,1]), "\\_")[[1]][1], ylab = strsplit(as.character(data[j,1]), "\\_")[[1]][1])
ca <- cancor(x, y)
corr <- ca$cor
corr[1]>0.7)
corr[1]>0.7
N <- dim(x)[1]
p <- dim(x)[2]
q <- dim(y)[2]
p.asym(rho = corr, N, p, q, tstat = "Wilks")
corr
ca
ca$cor
?cancor
rm(list=ls())
library("CCP")
# Needed for plotting
# library("candisc")
data <- read.csv(file="/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/synopsys/preprocessed/cca_input.csv", header=TRUE, sep=",")
n <- nrow(data)
test <- data[,2:ncol(data)]
test <- apply(test, 1, function(x) as.numeric(x))
test <- scale(t(test))
detach("package:candisc", unload=TRUE)
x <- t(test[i:(i+2),])
y <- t(test[j:(j+2),])
ca <- cancor(x, y, set.names=c(strsplit(as.character(data[i,1]), "\\_")[[1]][1], strsplit(as.character(data[j,1]), "\\_")[[1]][1]))
# plot(ca, xlab = strsplit(as.character(data[i,1]), "\\_")[[1]][1], ylab = strsplit(as.character(data[j,1]), "\\_")[[1]][1])
ca <- cancor(x, y)
corr <- ca$cor
i
i=1
j=4
x <- t(test[i:(i+2),])
y <- t(test[j:(j+2),])
ca <- cancor(x, y, set.names=c(strsplit(as.character(data[i,1]), "\\_")[[1]][1], strsplit(as.character(data[j,1]), "\\_")[[1]][1]))
# plot(ca, xlab = strsplit(as.character(data[i,1]), "\\_")[[1]][1], ylab = strsplit(as.character(data[j,1]), "\\_")[[1]][1])
ca <- cancor(x, y)
corr <- ca$cor
c
ca
ca
?cancor
x <- t(test[i:(i+2),])
y <- t(test[j:(j+2),])
ca <- cancor(x, y)
ca <- cancor(x, y)
corr <- ca$cor
corr
N <- dim(x)[1]
p <- dim(x)[2]
q <- dim(y)[2]
p.asym(rho = corr, N, p, q, tstat = "Wilks")
?p.asym
data(Rohwer, package="heplots")
X <- as.matrix(Rohwer[,6:10])  # the PA tests
Y <- as.matrix(Rohwer[,3:5])   # the aptitude/ability variables
cc <- cancor(X, Y, set.names=c("PA", "Ability"))
Wilks(cc)
library(candisc)
data(Rohwer, package="heplots")
X <- as.matrix(Rohwer[,6:10])  # the PA tests
Y <- as.matrix(Rohwer[,3:5])   # the aptitude/ability variables
cc <- cancor(X, Y, set.names=c("PA", "Ability"))
Wilks(cc)
cc
?p.asym
?scale
?t
x <- matrix(1:10, ncol = 2)
scale(x)
x
log2(1)
logs(x)
log2(x)
rm(list=ls())
library(igraph)
# Read data
my.data <- read.csv("/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/synopsys/cca/correlations_transonly.csv", sep = ",", header=FALSE, stringsAsFactors = FALSE)
my.data <- my.data[,1:3]
my.data <- my.data[order(my.data[3]),]
my.data2 <- my.data[1:nrow(my.data)-1,]
my.data2[,3] <- as.numeric(my.data2[,3])
my.graph <- graph.data.frame(d = my.data2, directed = FALSE)
write.graph(graph = my.graph, file = 'net.gml', format = 'gml')
chrc_graph = read.graph("net.gml", format = "gml")
# Get edge weights
w = 100*(my.data2[,3])
# Add one so none of the weights are zero
w = w - min(w) + 1
# Get edgelist
lab = get.edgelist(chrc_graph)
# Get degrees
glab = graph.edgelist(lab, directed = FALSE)
lab_degree = degree(glab)
lab_degree = lab_degree/max(lab_degree)
lab_degree = lab_degree[order(names(lab_degree))]
# Eigenvector
lab_eigen = eigen_centrality(chrc_graph, directed = FALSE, scale = TRUE, weights = w)$vector
lab_eigen = lab_eigen/max(lab_eigen)
lab_eigen = lab_eigen[order(names(lab_eigen))]
# Closeness
lab_close = closeness(chrc_graph, weights = w)
lab_close = lab_close/max(lab_close)
lab_close = lab_close[order(names(lab_close))]
# Betweenness
lab_betw = betweenness(chrc_graph, directed = FALSE, weights = w)
lab_betw = lab_betw/max(lab_betw)
lab_betw = lab_betw[order(names(lab_betw))]
# PageRank (more balanced version of degree)
lab_pr = page_rank(chrc_graph, directed = FALSE, weights = w)$vector
lab_pr = lab_pr/max(lab_pr)
lab_pr = lab_pr[order(names(lab_pr))]
lab_eigen
lab_pr
plot(lab_eigen, lab_pr)
p.asym(rho = corr, N, p, q, tstat = "Wilks")
library("CCP")
# Needed for plotting
# library("candisc")
data <- read.csv(file="/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/synopsys/preprocessed/cca_input.csv", header=TRUE, sep=",")
n <- nrow(data)
test <- data[,2:ncol(data)]
test <- apply(test, 1, function(x) as.numeric(x))
test <- scale(t(test))
i
i=1
j=4
x <- t(test[i:(i+2),])
y <- t(test[j:(j+2),])
ca <- cancor(x, y)
# ca <- cancor(x, y, set.names=c(strsplit(as.character(data[i,1]), "\\_")[[1]][1], strsplit(as.character(data[j,1]), "\\_")[[1]][1]))
# plot(ca, xlab = strsplit(as.character(data[i,1]), "\\_")[[1]][1], ylab = strsplit(as.character(data[j,1]), "\\_")[[1]][1])
ca <- cancor(x, y)
corr <- ca$cor
N <- dim(x)[1]
p <- dim(x)[2]
q <- dim(y)[2]
# Compute Wilks' Lambda using F-approximation (Rao's F)
p.asym(rho = corr, N, p, q, tstat = "Wilks")
i=1
x <- t(test[i:(i+2),])
y <- t(test[j:(j+2),])
ca <- cancor(x, y)
# ca <- cancor(x, y, set.names=c(strsplit(as.character(data[i,1]), "\\_")[[1]][1], strsplit(as.character(data[j,1]), "\\_")[[1]][1]))
# plot(ca, xlab = strsplit(as.character(data[i,1]), "\\_")[[1]][1], ylab = strsplit(as.character(data[j,1]), "\\_")[[1]][1])
ca <- cancor(x, y)
corr <- ca$cor
# Checks if corelation is strong
corr
ca
detach("package:candisc", unload=TRUE)
library("CCP")
# Needed for plotting
# library("candisc")
data <- read.csv(file="/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/synopsys/preprocessed/cca_input.csv", header=TRUE, sep=",")
n <- nrow(data)
test <- data[,2:ncol(data)]
test <- apply(test, 1, function(x) as.numeric(x))
test <- scale(t(test))
i=1
j=4
x <- t(test[i:(i+2),])
y <- t(test[j:(j+2),])
ca <- cancor(x, y)
# ca <- cancor(x, y, set.names=c(strsplit(as.character(data[i,1]), "\\_")[[1]][1], strsplit(as.character(data[j,1]), "\\_")[[1]][1]))
# plot(ca, xlab = strsplit(as.character(data[i,1]), "\\_")[[1]][1], ylab = strsplit(as.character(data[j,1]), "\\_")[[1]][1])
ca <- cancor(x, y)
corr <- ca$cor
corr
N <- dim(x)[1]
p <- dim(x)[2]
q <- dim(y)[2]
# Compute Wilks' Lambda using F-approximation (Rao's F)
pval <- p.asym(rho = corr, N, p, q, tstat = "Wilks")$p.value
library("impute", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?scale
# Read data
my.data <- read.csv("/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/synopsys/cca/correlations_transonly.csv", sep = ",", header=FALSE, stringsAsFactors = FALSE)
my.data <- my.data[,1:3]
my.data <- my.data[order(my.data[3]),]
my.data2 <- my.data[1:nrow(my.data)-1,]
my.data2[,3] <- as.numeric(my.data2[,3])
my.data2 <- tail(my.data2, 1500)
View(my.data3)
View(my.data2)
my.data <- read.csv("/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/synopsys/cca/correlations_transonly.csv", sep = ",", header=FALSE, stringsAsFactors = FALSE)
View(my.data)
my.data <- my.data[,1:3]
my.data <- my.data[order(my.data[3]),]
View(my.data)
tail(my.data)
tail(my.data, 1500)
head(tail(my.data, 1500))
rm(list=ls())
library("FirebrowseR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
subunits <- read.table("/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/SubunitList.csv",
header = TRUE, sep = ",", stringsAsFactors = FALSE)
subunits <- subunits[,1]
output <- matrix(NA, nrow = length(subunits), ncol = 1080)
rownames(output) <- subunits
View(output)
library(igraph)
my.data <- read.csv("/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/synopsys/cca/correlations_transonly.csv", sep = ",", header=FALSE, stringsAsFactors = FALSE)
my.data <- my.data[,1:3]
my.data <- my.data[order(my.data[3]),]
my.data2 <- my.data
my.data <- read.csv("/Users/swetharevanur/Documents/12thGrade/SIMR/TCGA_Data/BRCA/synopsys/cca/correlations_transonly.csv", sep = ",", header=FALSE, stringsAsFactors = FALSE)
my.data <- my.data[,1:3]
my.data <- my.data[order(my.data[3]),]
my.data2 <- my.data
df <- data.frame(nrow=4, ncol =4)
View(df)
df <- data.frame(c("TH", "NG", "S", "CR"),
c("ST", "PE", "T", "E"),
c("GE", "CH", "ON", "OO"),
c("ND", "AT", "IL", "A"))
View(df)
View(df)
df <- data.frame(c("TH", "ST", "GE", "ND"),
c("NG", "PE", "CH", "AT"),
c("S", "T", "ON", "IL"),
c("CR", "E", "OO", "A"))
View(df)
?expand.grid
expand.grid(df)
View(expand.grid(df))
View(apply(expand.grid(df), 1, paste, collapse="")
)
collapse(df)
vec <- c("TH", "ST", "GE", "ND", "NG", "PE", "CH", "AT", "S", "T", "ON", "IL", "CR", "E", "OO", "A")
View(expand.grid(vec))
install.packages("combinat")
install.packages("combinat")
library(combinat)
?combn
combn(vec, 4)
View(combn(vec, 4))
N=6
for(i in 1:N) {
print(N)
}
?print
N
N=6
for(i in 1:N) {
for(j in 1:N-i) {
print(" ")
}
for(k in 1:i) {
print("#")
}
}
N=6
for(i in 1:N) {
for(j in 1:N-i) {
" "
}
for(k in 1:i) {
"#"
}
}
N=6
for(i in 1:N) {
for(j in 1:N-i) {
cat(" ")
}
for(k in 1:i) {
cat("#")
}
}
N=6
for(i in 1:N) {
for(j in 1:N-i) {
cat(" ")
}
for(k in 1:i) {
print("#")
}
}
N=6
for(i in 1:N) {
for(j in 1:N-i) {
cat(" ")
}
for(k in 1:i) {
cat("#")
}
cat("\n")
}
N=6
for(i in 1:N) {
for(k in 1:i) {
cat("#")
}
for(j in 1:N-i) {
cat(" ")
}
cat("\n")
}
N=6
for(i in 1:N) {
for(k in 1:i) {
cat("#")
}
for(j in 1:N-i) {
cat("\b")
}
cat("\n")
}
N=6
for(i in 1:N) {
for(k in 1:i) {
writeLines("#")
}
for(j in 1:N-i) {
writeLines("\b")
}
writeLines("\n")
}
N=6
for(i in 1:N) {
for(k in 1:i) {
cat("#")
}
for(j in 1:N-i) {
cat("\b")
}
writeLines("\n")
}
N=6
for(i in 1:N) {
for(k in 1:i) {
cat("#")
}
for(j in 1:N-i) {
cat("0")
}
writeLines("\n")
}
install.packages("hash")
library(hash)
?hash
h <- hash()
.set( h, keys=letters, values=1:26 )
View(h)
h
head(h)
?all
clear(h)
h[ letters[1:4] ] <- 4:1
h
is.empty(h)
keys(h)
length(h)
values(h, keys=c('a','a','b' ) )
?read.csv
getwd()
setwd("/Users/swetharevanur/Documents/dataviz/chloropleth/")
table <- read.csv("population_estimates.csv", header = TRUE, sep = ",")
View(table)
class(table)
na.omit(table)
head(na.omit(tabl))
head(na.omit(table))
dim(table)
table <- na.omit(table)
dim(table)
3273-3215
View(table)
orig <- read.csv("population_estimates.csv", header = TRUE, sep = ",")
# If row has NA values delete
table <- na.omit(orig)
View(orig)
orig <- read.csv("population_estimates.csv", header = TRUE, sep = ",", colClasses='character')
# If row has NA values delete
table <- na.omit(orig)
View(orig)
View(table)
?nrows
?nrow
install.packages("Quandl")
library(Quandl)
?quandl
?Quandl
Quandl("ECONOMIST/BIGMAC_USA")
Quandl("ECONOMIST/BIGMAC_KOR")
Quandl("ECONOMIST/BIGMAC")
Quandl("ECONOMIST")
Quandl("ECONOMIST/BIGMAC_KOR")
